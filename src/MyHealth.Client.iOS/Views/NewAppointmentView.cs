// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Cirrious.MvvmCross.Touch.Views;
using Cirrious.MvvmCross.Binding.BindingContext;
using MyHealth.Client.Core;
using Cirrious.MvvmCross.Binding.Touch.Views;
using CoreGraphics;
using Factorymind.Components;
using System.Linq;
using System.Diagnostics;
using MyHealth.Client.iOS.Controls;
using System.Drawing;

namespace MyHealth.Client.iOS
{
	public partial class NewAppointmentView : BaseView
	{
        static readonly int TextFieldMargin = 10;
        static readonly int ArrowWidth = 14;

        UIPickerView _specialityPicker, _doctorPicker, _hourPicker;

        protected NewAppointmentViewModel NewAppointmentViewModel
        {
            get { return ViewModel as NewAppointmentViewModel; }
        }

		public NewAppointmentView (IntPtr handle) : base (handle)
		{
		}

        public override UIStatusBarStyle PreferredStatusBarStyle()
        {
            return UIStatusBarStyle.LightContent;
        }

        protected override void SetUpBindings()
        {
            base.SetUpBindings();

            var set = this.CreateBindingSet<NewAppointmentView, NewAppointmentViewModel>(); 
            SetUpSpecialityBindings(set);
            SetUpDoctorBindings(set);
            SetUpHourBindings(set);
            set.Bind(cancelButton).To(vm => vm.CancelCommand);
            set.Bind(saveButton).To(vm => vm.AcceptCommand);

			SetUpAverageBindings(set);

            set.Apply(); 

            CustomizeTextField(specialityTextField, _specialityPicker);
            CustomizeTextField(doctorTextField, _doctorPicker);
            CustomizeTextField(hourTextField, _hourPicker);
        }

        void SetUpHourBindings(MvxFluentBindingDescriptionSet<NewAppointmentView, NewAppointmentViewModel> set)
        {
            set.Bind(hourTextField).To(vm => vm.SelectedHour).OneWay();
            _hourPicker = new UIPickerView {
                ShowSelectionIndicator = true
            };
            var hourPickerViewModel = new MvxPickerViewModel(_hourPicker);
            _hourPicker.Model = hourPickerViewModel;
            set.Bind(hourPickerViewModel).For(p => p.ItemsSource).To(vm => vm.PossibleHours).OneWay();
            set.Bind(hourPickerViewModel).For(p => p.SelectedItem).To(vm => vm.SelectedHour).OneWayToSource();
        }

        void SetUpDoctorBindings(MvxFluentBindingDescriptionSet<NewAppointmentView, NewAppointmentViewModel> set)
        {
            set.Bind(doctorTextField).To(vm => vm.SelectedDoctor.Name).OneWay();
            _doctorPicker = new UIPickerView {
                ShowSelectionIndicator = true
            };
            var doctorPickerViewModel = new MvxPickerViewModel(_doctorPicker);
            _doctorPicker.Model = doctorPickerViewModel;
            set.Bind(doctorPickerViewModel).For(p => p.ItemsSource).To(vm => vm.Doctors).OneWay();
            set.Bind(doctorPickerViewModel).For(p => p.SelectedItem).To(vm => vm.SelectedDoctor).OneWayToSource();
        }

        void SetUpSpecialityBindings(MvxFluentBindingDescriptionSet<NewAppointmentView, NewAppointmentViewModel> set)
        {
            set.Bind(specialityTextField).To(vm => vm.SelectedSpeciality).OneWay();
            _specialityPicker = new UIPickerView {
                ShowSelectionIndicator = true
            };
            var specialityPickerViewModel = new MvxPickerViewModel(_specialityPicker);
            _specialityPicker.Model = specialityPickerViewModel;
            set.Bind(specialityPickerViewModel).For(p => p.ItemsSource).To(vm => vm.AvailableSpecialities).OneTime();
            set.Bind(specialityPickerViewModel).For(p => p.SelectedItem).To(vm => vm.SelectedSpeciality).OneWayToSource();
        }

        protected override void SetUpUI()
        {
            base.SetUpUI();

            var calendar = FMCalendarHelper.GetPreconfiguredInstance(
                new CGRect(0, 0, 274, 273),
                date => NewAppointmentViewModel.SelectedDate = date);
            calendarContainerView.AddSubview(calendar);
            calendarContainerView.SetUpBorder();

            View.AddGestureRecognizer(new UITapGestureRecognizer(() => 
                {
                    specialityTextField.ResignFirstResponder();
                    doctorTextField.ResignFirstResponder();
                    hourTextField.ResignFirstResponder();
                }));

            backgroundView.SetUpShadow();

        }

		void SetUpAverageBindings(MvxFluentBindingDescriptionSet<NewAppointmentView, NewAppointmentViewModel> set)
		{
			set.Bind (avgLabel)
				.For (l => l.Text).To (vm => vm.WaitingTimeAvg)
				.WithConversion (new IntToMinutesStringConverter ())
				.OneWay ();
		}

		private void HideAverageTimeWaiting() 
		{
			avgContainerView.RemoveConstraint (avgFixedHeightConstraint);
			avgContainerView.Frame = new CGRect (avgContainerView.Frame.X, avgContainerView.Frame.Y, avgContainerView.Frame.Width, 0.0f);		
		}
			

        void CustomizeTextField(UITextField textField, UIPickerView pickerView)
        {
            textField.TintColor = UIColor.Clear;

            var leftPaddingView = new UIView(
                new CGRect(0, 0, TextFieldMargin, textField.Frame.Height));
            textField.LeftView = leftPaddingView;
            textField.LeftViewMode = UITextFieldViewMode.Always;

            var arrowImageView = new UIImageView(new CGRect(0, 0,
                ArrowWidth + TextFieldMargin, textField.Frame.Height))
            {
                Image = UIImage.FromBundle("arrow.png"),
                ContentMode = UIViewContentMode.Left
            };
            textField.RightView = arrowImageView;
            textField.RightViewMode = UITextFieldViewMode.UnlessEditing;

            textField.InputView = pickerView;

            var toolbar = CreateToolbar();

            textField.InputAccessoryView = toolbar;

            textField.SetUpBorder();
        }

        private UIToolbar CreateToolbar()
        {
            var toolbar = new UIToolbar(new CGRect(0, 0, 320, 44));
            var done = new UIBarButtonItem("Done", UIBarButtonItemStyle.Bordered, (sender, e) =>
                {
                    specialityTextField.ResignFirstResponder();
                    doctorTextField.ResignFirstResponder();
                    hourTextField.ResignFirstResponder();
                })
            {
                TintColor = Colors.Accent
            };
            toolbar.SetItems(new UIBarButtonItem[] { done }, false);
            return toolbar;
        }
    }
}
